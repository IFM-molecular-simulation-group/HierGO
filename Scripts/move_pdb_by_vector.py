#!/usr/bin/python3
import sys, os, random
import numpy as np
from argparse import ArgumentParser

## USAGE
# python3 move_pdb_by_vector.py -i inputfilename -vector [i,j,k] -out outputfilename

## LIMITATIONS
#  - cell must be orthogonal

######################################################################
## Read pdb to local structure format
######################################################################
def read_pdb_to_structure(InputFile):
   coords = []
   atomtypes = []
   for line in open(InputFile):
       if "CRYST1" in line:
           PBC = line.split()
           abc = [ float(PBC[1]), float(PBC[2]), float(PBC[3]) ]
       elif "ATOM" in line or "HETATM" in line:
           fields = line.split()
           coords.append( [ float(fields[5]), float(fields[6]), float(fields[7]) ] )
           atomtypes.append( fields[2] )

   return(coords,atomtypes,abc)

######################################################################
## Write an output PDB file
######################################################################
def write_pdb_file(coords,atomtypes,abc,FileName):
    newlines = []
    count = 0
    for i in range(0,len(coords)):
        #newlines.append(i)
        #newlines.append(coords[i])
        #print("{:6s}{:5d} {:^4s} {:3s}  {:4d}    {:8.3f}{:8.3f}{:8.3f}{:6.2f}{:6.2f}          {:>2s}".format("ATOM",count,str(atomtypes[i]),"UNL",1,coords[i][0],coords[i][1],coords[i][2]+31.675,1.00,0.00,str(atomtypes[i])))
        #newlines.append("{:6s}{:5d} {:^4s} {:3s}  {:4d}    {:8.3f}{:8.3f}{:8.3f}{:6.2f}{:6.2f}          {:>2s}".format("ATOM",count,str(atomtypes[i]),"UNL",1,coords[i][0],coords[i][1],coords[i][2],1.00,0.00,str(atomtypes[i])))
        newlines.append("{:6s}{:5d} {:^4s} {:3s}  {:4d}    {:8.3f}{:8.3f}{:8.3f}{:6.2f}{:6.2f}          {:>2s}".format("ATOM",count,str(atomtypes[i]),"UNL",1,coords[i][0],coords[i][1],coords[i][2],1.00,0.00,str(atomtypes[i])))
        count += 1

    file = open(FileName,"w")
    file.write("AUTHOR    GENERATED BY NG TILE DECORATION\n")
    file.write("CRYST1 {:8.3f} {:8.3f} {:8.3f} {:6.2f} {:6.2f} {:6.2f} P1          1\n".format(abc[0],abc[1],abc[2],90.0,90.0,90.0))
    for line in newlines:
        file.write("%s\n"%(line))
    file.close()

    return()

######################################################################
######################################################################


######################################################################
## Read inputs
######################################################################
def read_inputs():
    parser = ArgumentParser()
    parser.add_argument('-i', type=str)
    parser.add_argument('-vector', type=str)
    parser.add_argument('-out', type=str)

    args = parser.parse_args()
    elements = args.vector.split(",")
    ijk = [ float(elements[0].strip("[")), float(elements[1]),float(elements[2].strip("]")) ]
    return(args.i,ijk,args.out)

######################################################################
## Move all coordinates by a vector
######################################################################
def move_coords_by_vector(Coords,Vector):
    NewCoords = []
    for i in range(0,len(Coords)):
        newx = Coords[i][0]+Vector[0]
        newy = Coords[i][1]+Vector[1]
        newz = Coords[i][2]+Vector[2]
        NewCoords.append( [ newx, newy, newz ] )
    return(NewCoords)

######################################################################
## Wrap coordinates back to within the periodic boundary conditions
######################################################################
def wrap_coords(coords,abc):
    for atom in range(0,len(coords)):
        if coords[atom][0] < 0:
            coords[atom][0] += abc[0]
        elif coords[atom][0] > abc[0]:
            coords[atom][0] -= abc[0]
        if coords[atom][1] < 0:
            coords[atom][1] += abc[1]
        elif coords[atom][1] > abc[1]:
            coords[atom][1] -= abc[1]
        #if coords[atom][2] < 0:
        #    coords[atom][2] += abc[2]
        #elif coords[atom][2] > abc[2]:
        #    coords[atom][2] -= abc[2]
    return(coords)

######################################################################
## MAIN
######################################################################
def main():
    ## Read inputs
    filename,vector,outfilename = read_inputs()
    ## Read file
    coords,atomtypes,abc = read_pdb_to_structure(filename)
    ## Move coords
    coords = move_coords_by_vector(coords,vector)
    coords = wrap_coords(coords,abc)
    ## Write final coords
    write_pdb_file(coords,atomtypes,abc,outfilename)

main()
